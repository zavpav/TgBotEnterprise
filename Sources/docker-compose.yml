version: '3.4'

services:
  postgre:
    image: postgres:13
    container_name: tg-postgre
    ports:
    - 5434:5432
    hostname: tg-postgre
    environment:
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=123456
    volumes:
    - ../DockerVolumes/Db/.db/data:/var/lib/postgresql/data
    #- ../DockerVolumes/Db/cfg/init.d:/docker-entrypoint-initdb.d
  rabbit:
    image: rabbitmq:3-management
    container_name: tg-rabbit
    ports:
    - 5672:5672 
    - 15672:15672
    hostname: tg-rabbit-mq
  logger:
    image: datalust/seq:2020.1
    container_name: tg-seq
    ports:
    - 5341:80
    - 8889:80
    hostname: tg-seq-logger
    environment:
    - ACCEPT_EULA=Y
    volumes:
    - ../DockerVolumes/Seq/Logs:/path/to/seq/data
  redmineservice:
    image: ${DOCKER_REGISTRY-}redmineservice
    container_name: tg-redmine-service
    build:
      context: .
      dockerfile: RedmineService\Dockerfile
    environment:
    - RABBIT_MQ=tg-rabbit-mq
    - NODE_NAME=Redmine
    - LOGGER_HOST=tg-seq-logger
    volumes:
    - ../DockerVolumes/RedmineConfig/Secretic:/app/Secretic
  jenkinsservice:
    image: ${DOCKER_REGISTRY-}jenkinsservice
    container_name: tg-jenkins-service
    build:
      context: .
      dockerfile: JenkinsService\Dockerfile
    environment:
    - RABBIT_MQ=tg-rabbit-mq
    - NODE_NAME=Jenkins
    - LOGGER_HOST=tg-seq-logger
    volumes:
    - ../DockerVolumes/JenkinsConfig/Secretic:/app/Secretic
  mainbotservice:
    image: ${DOCKER_REGISTRY-}mainbotservice
    container_name: tg-mainbot-service
    build:
      context: .
      dockerfile: MainBotService\Dockerfile
    environment:
    - RABBIT_MQ=tg-rabbit-mq
    - LOGGER_HOST=tg-seq-logger
    volumes:
    - ../DockerVolumes/MainBot/Secretic:/app/Secretic
  webadminservice:
    image: ${DOCKER_REGISTRY-}webadminservice
    container_name: tg-webadmin-service
    build:
      context: .
      dockerfile: WebAdminService/Dockerfile
    ports:
    - 8888:80
    environment:
    - RABBIT_MQ=tg-rabbit-mq
    - LOGGER_HOST=tg-seq-logger

  telegramservice:
    image: ${DOCKER_REGISTRY-}telegramservice
    container_name: tg-telegram-service
    build:
      context: .
      dockerfile: TelegramService/Dockerfile
    environment:
    - RABBIT_MQ=tg-rabbit-mq
    - NODE_NAME=Telegram
    - LOGGER_HOST=tg-seq-logger

    - POSTGRE_HOST=tg-postgre
    - POSTGRE_PORT=5432
    - TELEGRAM_KEY=undef
    volumes:
    - ../DockerVolumes/Telegram/Secretic:/app/Secretic
# secret  - vault
# gateway - Traefik 
# logger  - seq for start

#logger? elastic? graylog?

  #vault:
  #  image: vault
  #  container_name: tg-secretic
  #  hostname: tg-secretic
#Running Vault for Development
#$ docker run --cap-add=IPC_LOCK -d --name=dev-vault vault
#This runs a completely in-memory Vault server, which is useful for development but should not be used in production.

#When running in development mode, two additional options can be set via environment variables:

#VAULT_DEV_ROOT_TOKEN_ID: This sets the ID of the initial generated root token to the given value
#VAULT_DEV_LISTEN_ADDRESS: This sets the IP:port of the development server listener (defaults to 0.0.0.0:8200)
#As an example:

#$ docker run --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:1234' vault

